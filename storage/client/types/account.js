/**
 * client/account.js
 */

import Roles from './roles.js'

export default class Account {

  constructor(user) {
    this.clear()
    if (user) {
      this.userid = user.userid
      this.password = user.password
    }
  }

  clear() {
    this.userid = ''
    this.password = ''
    this.roles = [ Roles.Guest ]

    this.dateCreated = null
    this.dateUpdated = null
    this.lastLogin = null

    // note, state is updated at runtime
    // state can be copied, but shouldn't be saved or serialized
    this._state = {
      isAuthenticated: false,
      isLocal: false
    }

    this.profile = {
      userName: '', // Tname of this account, suitable for display.
      givenName: '', // first name of user.
      middleName: '', // middle name(s) of user.
      familyName: '', // last name of user.
      email: '', // user's contact email address.
      photoURL: '', // URL of an image.
      webURL: '', // URL of user's web site
      // external links
      links: [{
        name: '', // The provider with which the account authenticated (facebook, twitter, etc.).
        webURL: '', // A unique identifier for the account, as generated by the service provider.
      }]
    }

    this.settings = {
      homePage: '',
      theme: ''  // system via CSS media feature
    }
  }

  /**
   * returns true if user is Authenticated i.e. logged in
   */
  get isAuthenticated() {
    return (this._state && this._state.isAuthenticated) || false
  }
  set isAuthenticated(value) {
    if (!this._state)
      this._state = {}
    this._state.isAuthenticated = value
  }

  get isLocal() {
    return (this._state && this._state.isLocal) || false
  }
  set isLocal(value) {
    if (!this._state)
      this._state = {}
    this._state.isLocal = value
  }

  /**
   * isAuthorized returns true if user has at least one of the requested role(s).
   * @param {*} role as a string or array of strings
   */
  isAuthorized(roles) {
    if (typeof roles === "string") {
      return roles === Roles.Public || this.roles.includes(roles)
    }
    else if (Array.isArray(roles)) {
      if (roles.includes(Roles.Public))
        return true;

      return roles.some(role => this.roles.includes(role))
    }
    return false
  }

  /**
   * helper for accessing state
   */
  get state() {
    if (!this._state)
      this._state = {}
    return this._state
  }

  // shallow copy of all non-function properties
  copy(u2) {
    let u1 = this

    Object.keys(u2).forEach(function (key) {
      let t = typeof u2[ key ]
      if (t !== "undefined" && t !== "function")
        u1[ key ] = u2[ key ]
    })
  }

  // shallow copy of non-function properties
  // excluding userid, password, state, any props starting with '_'
  update(u2) {
    let u1 = this

    Object.keys(u2).forEach(function (key) {
      let t = typeof u2[ key ]

      if (key === 'userid' || key === 'password' || key[0] === '_') {
        // don't update
      } else if (t !== "undefined" && t !== "function")
        u1[ key ] = u2[ key ]
    })
  }

    /**
   * Sanitized copy of account properties for sending to client apps.
   * Stripped of password, state, functions and undefined values.
   */
    sanitize() {
      let a1 = {};
      let a2 = this;

      Object.keys(this).forEach(function (key) {
        let t = typeof a2[key];

        if (key === 'password' || key[0] === '_') {
          // skip
        } else if (t !== "undefined" && t !== "function") {
          a1[key] = a2[key];
        }
      });

      return a1;
    }
}
